# coding: utf-8

"""
    CovA API

    Provides simple data about Covid19 // SpaceApps Hackathon 2020  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: tom@fjellsson.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Evaluation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'recovered': 'int',
        'infected': 'int',
        'country': 'str'
    }

    attribute_map = {
        'recovered': 'recovered',
        'infected': 'infected',
        'country': 'country'
    }

    def __init__(self, recovered=None, infected=None, country=None):  # noqa: E501
        """Evaluation - a model defined in Swagger"""  # noqa: E501
        self._recovered = None
        self._infected = None
        self._country = None
        self.discriminator = None
        self.recovered = recovered
        self.infected = infected
        self.country = country

    @property
    def recovered(self):
        """Gets the recovered of this Evaluation.  # noqa: E501


        :return: The recovered of this Evaluation.  # noqa: E501
        :rtype: int
        """
        return self._recovered

    @recovered.setter
    def recovered(self, recovered):
        """Sets the recovered of this Evaluation.


        :param recovered: The recovered of this Evaluation.  # noqa: E501
        :type: int
        """
        if recovered is None:
            raise ValueError("Invalid value for `recovered`, must not be `None`")  # noqa: E501

        self._recovered = recovered

    @property
    def infected(self):
        """Gets the infected of this Evaluation.  # noqa: E501


        :return: The infected of this Evaluation.  # noqa: E501
        :rtype: int
        """
        return self._infected

    @infected.setter
    def infected(self, infected):
        """Sets the infected of this Evaluation.


        :param infected: The infected of this Evaluation.  # noqa: E501
        :type: int
        """
        if infected is None:
            raise ValueError("Invalid value for `infected`, must not be `None`")  # noqa: E501

        self._infected = infected

    @property
    def country(self):
        """Gets the country of this Evaluation.  # noqa: E501


        :return: The country of this Evaluation.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Evaluation.


        :param country: The country of this Evaluation.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Evaluation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Evaluation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
